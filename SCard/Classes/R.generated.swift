//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 9 images.
  struct image {
    /// Image `arrowDown`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowDown")
    /// Image `arrowRightSmall`.
    static let arrowRightSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowRightSmall")
    /// Image `checkSmall`.
    static let checkSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkSmall")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `crossSmall`.
    static let crossSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "crossSmall")
    /// Image `kycPending`.
    static let kycPending = Rswift.ImageResource(bundle: R.hostingBundle, name: "kycPending")
    /// Image `kycRejected`.
    static let kycRejected = Rswift.ImageResource(bundle: R.hostingBundle, name: "kycRejected")
    /// Image `kycSuccessful`.
    static let kycSuccessful = Rswift.ImageResource(bundle: R.hostingBundle, name: "kycSuccessful")
    /// Image `scFront`.
    static let scFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "scFront")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowDown", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowRightSmall", bundle: ..., traitCollection: ...)`
    static func arrowRightSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRightSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkSmall", bundle: ..., traitCollection: ...)`
    static func checkSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crossSmall", bundle: ..., traitCollection: ...)`
    static func crossSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crossSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kycPending", bundle: ..., traitCollection: ...)`
    static func kycPending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kycPending, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kycRejected", bundle: ..., traitCollection: ...)`
    static func kycRejected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kycRejected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kycSuccessful", bundle: ..., traitCollection: ...)`
    static func kycSuccessful(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kycSuccessful, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scFront", bundle: ..., traitCollection: ...)`
    static func scFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scFront, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `LaunchScreen`.
    static let launchScreen = _R.nib._LaunchScreen()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LaunchScreen", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.launchScreen) instead")
    static func launchScreen(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.launchScreen)
    }
    #endif

    static func launchScreen(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.launchScreen.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.soraCard` struct is generated, and contains static references to 97 localization keys.
    struct soraCard {
      /// de translation: 0 € jährliche Servicegebühr
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsAnnualServiceFee = Rswift.StringResource(key: "details.annual.service.fee", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: ACHTUNG: Sie haben nur 2 kostenlose Versuche, den Identitätsverifizierungs-Prozess zu bestehen. Jeder weitere Versuch danach kostet 3,8 €. Bezahlte Versuche werden nach dem nächsten Update der App verfügbar sein.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedAlert = Rswift.StringResource(key: "get.prepared.alert", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Abbrechen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonCancel = Rswift.StringResource(key: "common.cancel", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Abmelden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let cardHubSettingsLogoutButton = Rswift.StringResource(key: "card.hub.settings.logout.button", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Akzeptieren und fortfahren
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let termsAndConditionsAcceptAndContinue = Rswift.StringResource(key: "terms.and.conditions.accept.and.continue", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Allgemeine Geschäftsbedingungen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let termsAndConditionsTitle = Rswift.StringResource(key: "terms.and.conditions.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Allgemeine Nutzungsbedingungen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let termsAndConditionsGeneralTerms = Rswift.StringResource(key: "terms.and.conditions.general.terms", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Anmelden oder Registrieren
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let loginTitle = Rswift.StringResource(key: "login.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Antrag genehmigt
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationSuccessfulTitle = Rswift.StringResource(key: "verification.successful.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Aus SORA Card abmelden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let cardHubSettingsLogoutTitle = Rswift.StringResource(key: "card.hub.settings.logout.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Ausloggen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let logOut = Rswift.StringResource(key: "log.out", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Bereite dich vor
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedTitle = Rswift.StringResource(key: "get.prepared.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: CODE SENDEN
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verifyPhoneNumberSendCode = Rswift.StringResource(key: "verify.phone.number.send.code", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Code erneut senden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonResendCode = Rswift.StringResource(key: "common.resend.code", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Code falsch. Bitte versuche es erneut.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let otpErrorMessageWrongCode = Rswift.StringResource(key: "otp.error.message.wrong.code", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Das Zahlungs-Widget ist derzeit nicht verfügbar
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let paymentWidgetUnavailableMessage = Rswift.StringResource(key: "payment.widget.unavailable.message", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Daten können nicht abgerufen werden, tippen Sie, um zu aktualisieren.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let cantFetchRefresh = Rswift.StringResource(key: "cant.fetch.refresh", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Datenschutz-Bestimmungen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let termsAndConditionsPrivacyPolicy = Rswift.StringResource(key: "terms.and.conditions.privacy.policy", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Der Leitfaden wird während des Prozesses zur Verfügung gestellt
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedTakeSelfieDescription = Rswift.StringResource(key: "get.prepared.take.selfie.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Der Magic Link wird an Ihre E-Mail geschickt.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let enterEmailDescription = Rswift.StringResource(key: "enter.email.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Die Identitätsverifizierung wurde abgebrochen oder er ist anderweitig gescheitert.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationFailedDescription = Rswift.StringResource(key: "verification.failed.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Die SORA-Community sammelt keine personenbezogenen Daten, um die SORA Card und das IBAN-Konto zu erhalten, müssen Sie einen Identitätsverifizierungs-Prozess direkt beim Kartenaussteller durchführen.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let termsAndConditionsSoraCommunityAlert = Rswift.StringResource(key: "terms.and.conditions.sora.community.alert", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: E-Mail
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let enterEmailInputFieldLabel = Rswift.StringResource(key: "enter.email.input.field.label", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: ERNEUTES SENDEN IN %@
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verifyEmailResend = Rswift.StringResource(key: "verify.email.resend", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Ein offizielles Dokument (Rechnung eines Versorgungsunternehmens, Kontoauszug, Bescheinigung einer Behörde oder Korrespondenz), das Ihren vollständigen Namen und Ihre Adresse enthält und nicht älter als 3 Monate ist
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedProofAddressDescription = Rswift.StringResource(key: "get.prepared.proof.address.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Einwohner bestimmter Länder können derzeit keine SORA Card beantragen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let unsupportedCountriesDisclaimer = Rswift.StringResource(key: "unsupported.countries.disclaimer", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Entschuldigung für die Unannehmlichkeiten.   Wir arbeiten fleißig daran, dieses Problem zu lösen.   Bitte versuchen Sie es später noch einmal.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let paymentWidgetUnavailableDescription = Rswift.StringResource(key: "payment.widget.unavailable.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Erhalten Sie ein Euro-IBAN Konto und eine Mastercard Debitkarte, auf die Sie mit Ihrem SORA Wallet zugreifen können.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsDescription = Rswift.StringResource(key: "details.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Erneut kostenlos versuchen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationRejectedScreenTryAgainForFree = Rswift.StringResource(key: "verification.rejected.screen.try.again.for.free", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Erneut senden in %02d:% 02d
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonResendTimer = Rswift.StringResource(key: "common.resend.timer", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Erneut versuchen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonTryAgain = Rswift.StringResource(key: "common.try.again", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Familienname, Nachname
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let userRegistrationLastNameInputFiledLabel = Rswift.StringResource(key: "user.registration.last.name.input.filed.label", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Fehler
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonErrorGeneralTitle = Rswift.StringResource(key: "common.error.general.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Folgen Sie dem Magic Link, der an %@ gesendet wurde.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verifyEmailDescription = Rswift.StringResource(key: "verify.email.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Fortsetzen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonContinue = Rswift.StringResource(key: "common.continue", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Füllen Sie das Formular mit Ihrem Namen und Ihrer Adresse aus
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedPersonalInfoDescription = Rswift.StringResource(key: "get.prepared.personal.info.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Hole mehr XOR
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsGetMoreXor = Rswift.StringResource(key: "details.get.more.xor", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Holen Sie sich die SORA Card
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let statusNotStarted = Rswift.StringResource(key: "status.not.started", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Ich habe bereits eine Karte
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsAlreadyHaveCard = Rswift.StringResource(key: "details.already.have.card", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Ihr Antrag wurde abgelehnt.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationRejectedDescription = Rswift.StringResource(key: "verification.rejected.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Ihre E-Mail eingeben
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let enterEmailTitle = Rswift.StringResource(key: "enter.email.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Ihre Identitätsverifizierung ist erfolgreich und wir bereiten bereits den Versand der SORA Card vor!
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationSuccessfulDescription = Rswift.StringResource(key: "verification.successful.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Indem Sie fortfahren, bestätigen Sie, dass Sie diese Richtlinien gelesen, verstanden und akzeptiert haben
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let termsAndConditionsConfirmDescription = Rswift.StringResource(key: "terms.and.conditions.confirm.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Ja, ich verstehe
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let paymentWidgetUnavailableConfirm = Rswift.StringResource(key: "payment.widget.unavailable.confirm", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Jeder weitere Versuch wird Sie €%@ kosten.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationRejectedScreenAttemptsPriceDisclaimer = Rswift.StringResource(key: "verification.rejected.screen.attempts.price.disclaimer", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Karte kostenlos ausstellen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsIssueCard = Rswift.StringResource(key: "details.issue.card", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Karteneinstellungen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let cardHubSettingsTitle = Rswift.StringResource(key: "card.hub.settings.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Kaufen Sie XOR mit EUR
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getMoreXorDialogBuyOption = Rswift.StringResource(key: "get.more.xor.dialog.buy.option", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Kein Spam! Nur um Ihr Konto zu sichern
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonNoSpam = Rswift.StringResource(key: "common.no.spam", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Keine Freiversuche mehr
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let noFreeKycAttemptsTitle = Rswift.StringResource(key: "no.free.kyc.attempts.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Keine Handynummer gefunden, bitte überprüfen Sie sie erneut und versuchen Sie es erneut.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonUserNotFound = Rswift.StringResource(key: "common.user.not.found", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Kostenlose Kartenausgabe
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsFreeCardIssuance = Rswift.StringResource(key: "details.free.card.issuance", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Laden Sie die SORA Card mit Fiat- oder Kryptowährungen auf und zahlen Sie online, in Geschäften oder an Geldautomaten.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsTitle = Rswift.StringResource(key: "details.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Link erneut senden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonResendLink = Rswift.StringResource(key: "common.resend.link", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Link senden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonSendLink = Rswift.StringResource(key: "common.send.link", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Machen Sie ein Selfie
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedTakeSelfieTitle = Rswift.StringResource(key: "get.prepared.take.selfie.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: OK, ich bin bereit
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedOkTitle = Rswift.StringResource(key: "get.prepared.ok.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Reichen Sie ein Foto Ihres Ausweises ein
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedSubmitIdPhotoTitle = Rswift.StringResource(key: "get.prepared.submit.id.photo.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Reichen Sie ein Foto des Adressnachweises ein
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedProofAddressTitle = Rswift.StringResource(key: "get.prepared.proof.address.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Reisepass, Führerschein, Personalausweis oder Aufenthaltsgenehmigung
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedSubmitIdPhotoDescription = Rswift.StringResource(key: "get.prepared.submit.id.photo.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: SMS Code
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verifyPhoneNumberCodeInputFieldLabel = Rswift.StringResource(key: "verify.phone.number.code.input.field.label", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: SMS Code senden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonSendCode = Rswift.StringResource(key: "common.send.code", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: SMS-Code eingeben, der an %@ gesendet wurde
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verifyPhoneNumberDescription = Rswift.StringResource(key: "verify.phone.number.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: SORA Card abmelden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let cardHubSettingsLogout = Rswift.StringResource(key: "card.hub.settings.logout", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Schließen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonClose = Rswift.StringResource(key: "common.close", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Senden Sie Ihre persönlichen Daten
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedPersonalInfoTitle = Rswift.StringResource(key: "get.prepared.personal.info.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Sie benötigen %@ mehr XOR (€%@)
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsNeedXorDesription = Rswift.StringResource(key: "details.need.xor.desription", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Sie erhalten einen Verifizierungscode per SMS
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let enterPhoneNumberDescription = Rswift.StringResource(key: "enter.phone.number.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Sie haben %@ weitere freie Identitätsverifizierungs-Versuche.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationRejectedScreenAttemptsLeft = Rswift.StringResource(key: "verification.rejected.screen.attempts.left", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Sie haben Ihre kostenlosen Identitätsverifizierungs-Versuche genutzt.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationRejectedScreenAttemptsUsed = Rswift.StringResource(key: "verification.rejected.screen.attempts.used", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Sie haben Ihren Identitätsverifizierungs-Antrag erfolgreich abgeschlossen. Die Prüfung ist noch nicht abgeschlossen und Sie können in Kürze mit einer Entscheidung rechnen.  In der Regel wird die Entscheidung noch am selben Tag getroffen, in manchen Fällen kann sie bis zu 3 Tage dauern.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let kycResultVerificationInProgressDescription = Rswift.StringResource(key: "kyc.result.verification.in.progress.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Sie haben Ihren kostenlosen Versuch bereits genutzt
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsAlreadyUsedFreeTry = Rswift.StringResource(key: "details.already.used.free.try", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Sie haben Ihren kostenlosen Versuch genutzt, um den Identitätsverifizierungs-Prozess zu durchlaufen.   Wir bitten Sie, bis zur nächsten Aktualisierung der Anwendung zu warten, um mit kostenpflichtigen Versuchen fortzufahren.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let noFreeKycAttemptsDescription = Rswift.StringResource(key: "no.free.kyc.attempts.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Sie haben genug XOR
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsEnoughXorDesription = Rswift.StringResource(key: "details.enough.xor.desription", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Sie können gegen XOR tauschen oder mit Euro kaufen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getMoreXorDialogDescription = Rswift.StringResource(key: "get.more.xor.dialog.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Sie sind dabei, sich bei SORA Card abzumelden. Sie haben weiterhin Zugriff auf die eigenständige SORA Card App, aber Ihr Guthaben wird nicht mehr in der SORA Wallet verfügbar sein.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let cardHubSettingsLogoutDescription = Rswift.StringResource(key: "card.hub.settings.logout.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Siehe die Liste
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let unsupportedCountriesLink = Rswift.StringResource(key: "unsupported.countries.link", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Stellen Sie sich vor
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let userRegistrationTitle = Rswift.StringResource(key: "user.registration.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Support
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonSupport = Rswift.StringResource(key: "common.support", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Support
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationRejectedSupport = Rswift.StringResource(key: "verification.rejected.support", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Tausche Krypto gegen XOR
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getMoreXorDialogSwapOption = Rswift.StringResource(key: "get.more.xor.dialog.swap.option", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Telefonnummer
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let enterPhoneNumberPhoneInputFieldLabel = Rswift.StringResource(key: "enter.phone.number.phone.input.field.label", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Um die Identitätsverifizierung abzuschließen, müssen Sie Folgendes tun:
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let getPreparedNeed = Rswift.StringResource(key: "get.prepared.need", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Verifizieren Sie Ihre Telefonnummer
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verifyPhoneNumberTitle = Rswift.StringResource(key: "verify.phone.number.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Verifizierung abgelehnt
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationRejectedTitle = Rswift.StringResource(key: "verification.rejected.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Verifizierung fehlgeschlagen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationFailedTitle = Rswift.StringResource(key: "verification.failed.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Versuchen Sie es erneut für €%@
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verificationRejectedScreenTryAgainForEuros = Rswift.StringResource(key: "verification.rejected.screen.try.again.for.euros", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Verwenden Sie eine andere E-Mail
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonChangeEmail = Rswift.StringResource(key: "common.change.email", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Vorname
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let userRegistrationFirstNameInputFiledLabel = Rswift.StringResource(key: "user.registration.first.name.input.filed.label", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Wenn Sie XOR im Wert von mindestens €%@ auf Ihrem SORA Card halten, staken oder Liquidität bereitstellen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsFreeCardIssuanceConditionsXor = Rswift.StringResource(key: "details.free.card.issuance.conditions.xor", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Widget nicht verfügbar
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let paymentWidgetUnavailableTitle = Rswift.StringResource(key: "payment.widget.unavailable.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Wir möchten, dass Sie genau wissen, wie der SORA-Kartenservice funktionieren wird, wer Ihre Daten benötigt und warum. Wenn Sie diese Richtlinien lesen, können Sie die App unbesorgt nutzen.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let termsAndConditionsDescription = Rswift.StringResource(key: "terms.and.conditions.description", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: oder %@ € Anmeldegebühr
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let detailsFreeCardIssuanceConditionsEuro = Rswift.StringResource(key: "details.free.card.issuance.conditions.euro", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: ok
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let commonOk = Rswift.StringResource(key: "common.ok", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Ändern Sie Ihre E-Mail
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let changeEmailTitle = Rswift.StringResource(key: "change.email.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Überprüfen Sie Ihre E-Mail
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let verifyEmailTitle = Rswift.StringResource(key: "verify.email.title", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)
      /// de translation: Überprüfung läuft
      ///
      /// Locales: de, en, es, ru, fr, nl
      static let kycResultVerificationInProgress = Rswift.StringResource(key: "kyc.result.verification.in.progress", tableName: "SoraCard", bundle: R.hostingBundle, locales: ["de", "en", "es", "ru", "fr", "nl"], comment: nil)

      /// de translation: 0 € jährliche Servicegebühr
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsAnnualServiceFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("details.annual.service.fee", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.annual.service.fee"
        }

        return NSLocalizedString("details.annual.service.fee", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: ACHTUNG: Sie haben nur 2 kostenlose Versuche, den Identitätsverifizierungs-Prozess zu bestehen. Jeder weitere Versuch danach kostet 3,8 €. Bezahlte Versuche werden nach dem nächsten Update der App verfügbar sein.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedAlert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.alert", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.alert"
        }

        return NSLocalizedString("get.prepared.alert", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Abbrechen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.cancel", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.cancel"
        }

        return NSLocalizedString("common.cancel", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Abmelden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func cardHubSettingsLogoutButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card.hub.settings.logout.button", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "card.hub.settings.logout.button"
        }

        return NSLocalizedString("card.hub.settings.logout.button", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Akzeptieren und fortfahren
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func termsAndConditionsAcceptAndContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.and.conditions.accept.and.continue", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "terms.and.conditions.accept.and.continue"
        }

        return NSLocalizedString("terms.and.conditions.accept.and.continue", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Allgemeine Geschäftsbedingungen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func termsAndConditionsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.and.conditions.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "terms.and.conditions.title"
        }

        return NSLocalizedString("terms.and.conditions.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Allgemeine Nutzungsbedingungen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func termsAndConditionsGeneralTerms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.and.conditions.general.terms", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "terms.and.conditions.general.terms"
        }

        return NSLocalizedString("terms.and.conditions.general.terms", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Anmelden oder Registrieren
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func loginTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "login.title"
        }

        return NSLocalizedString("login.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Antrag genehmigt
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationSuccessfulTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification.successful.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.successful.title"
        }

        return NSLocalizedString("verification.successful.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Aus SORA Card abmelden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func cardHubSettingsLogoutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card.hub.settings.logout.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "card.hub.settings.logout.title"
        }

        return NSLocalizedString("card.hub.settings.logout.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Ausloggen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func logOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("log.out", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "log.out"
        }

        return NSLocalizedString("log.out", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Bereite dich vor
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.title"
        }

        return NSLocalizedString("get.prepared.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: CODE SENDEN
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verifyPhoneNumberSendCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify.phone.number.send.code", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verify.phone.number.send.code"
        }

        return NSLocalizedString("verify.phone.number.send.code", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Code erneut senden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonResendCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.resend.code", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.resend.code"
        }

        return NSLocalizedString("common.resend.code", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Code falsch. Bitte versuche es erneut.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func otpErrorMessageWrongCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("otp.error.message.wrong.code", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "otp.error.message.wrong.code"
        }

        return NSLocalizedString("otp.error.message.wrong.code", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Das Zahlungs-Widget ist derzeit nicht verfügbar
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func paymentWidgetUnavailableMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment.widget.unavailable.message", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "payment.widget.unavailable.message"
        }

        return NSLocalizedString("payment.widget.unavailable.message", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Daten können nicht abgerufen werden, tippen Sie, um zu aktualisieren.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func cantFetchRefresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cant.fetch.refresh", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "cant.fetch.refresh"
        }

        return NSLocalizedString("cant.fetch.refresh", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Datenschutz-Bestimmungen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func termsAndConditionsPrivacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.and.conditions.privacy.policy", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "terms.and.conditions.privacy.policy"
        }

        return NSLocalizedString("terms.and.conditions.privacy.policy", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Der Leitfaden wird während des Prozesses zur Verfügung gestellt
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedTakeSelfieDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.take.selfie.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.take.selfie.description"
        }

        return NSLocalizedString("get.prepared.take.selfie.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Der Magic Link wird an Ihre E-Mail geschickt.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func enterEmailDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.email.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "enter.email.description"
        }

        return NSLocalizedString("enter.email.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Die Identitätsverifizierung wurde abgebrochen oder er ist anderweitig gescheitert.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationFailedDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification.failed.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.failed.description"
        }

        return NSLocalizedString("verification.failed.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Die SORA-Community sammelt keine personenbezogenen Daten, um die SORA Card und das IBAN-Konto zu erhalten, müssen Sie einen Identitätsverifizierungs-Prozess direkt beim Kartenaussteller durchführen.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func termsAndConditionsSoraCommunityAlert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.and.conditions.sora.community.alert", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "terms.and.conditions.sora.community.alert"
        }

        return NSLocalizedString("terms.and.conditions.sora.community.alert", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: E-Mail
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func enterEmailInputFieldLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.email.input.field.label", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "enter.email.input.field.label"
        }

        return NSLocalizedString("enter.email.input.field.label", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: ERNEUTES SENDEN IN %@
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verifyEmailResend(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verify.email.resend", tableName: "SoraCard", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verify.email.resend"
        }

        let format = NSLocalizedString("verify.email.resend", tableName: "SoraCard", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// de translation: Ein offizielles Dokument (Rechnung eines Versorgungsunternehmens, Kontoauszug, Bescheinigung einer Behörde oder Korrespondenz), das Ihren vollständigen Namen und Ihre Adresse enthält und nicht älter als 3 Monate ist
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedProofAddressDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.proof.address.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.proof.address.description"
        }

        return NSLocalizedString("get.prepared.proof.address.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Einwohner bestimmter Länder können derzeit keine SORA Card beantragen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func unsupportedCountriesDisclaimer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unsupported.countries.disclaimer", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "unsupported.countries.disclaimer"
        }

        return NSLocalizedString("unsupported.countries.disclaimer", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Entschuldigung für die Unannehmlichkeiten.   Wir arbeiten fleißig daran, dieses Problem zu lösen.   Bitte versuchen Sie es später noch einmal.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func paymentWidgetUnavailableDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment.widget.unavailable.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "payment.widget.unavailable.description"
        }

        return NSLocalizedString("payment.widget.unavailable.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Erhalten Sie ein Euro-IBAN Konto und eine Mastercard Debitkarte, auf die Sie mit Ihrem SORA Wallet zugreifen können.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("details.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.description"
        }

        return NSLocalizedString("details.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Erneut kostenlos versuchen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationRejectedScreenTryAgainForFree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification.rejected.screen.try.again.for.free", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.rejected.screen.try.again.for.free"
        }

        return NSLocalizedString("verification.rejected.screen.try.again.for.free", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Erneut senden in %02d:% 02d
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonResendTimer(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common.resend.timer", tableName: "SoraCard", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.resend.timer"
        }

        let format = NSLocalizedString("common.resend.timer", tableName: "SoraCard", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// de translation: Erneut versuchen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.try.again", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.try.again"
        }

        return NSLocalizedString("common.try.again", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Familienname, Nachname
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func userRegistrationLastNameInputFiledLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user.registration.last.name.input.filed.label", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "user.registration.last.name.input.filed.label"
        }

        return NSLocalizedString("user.registration.last.name.input.filed.label", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Fehler
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonErrorGeneralTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.error.general.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.error.general.title"
        }

        return NSLocalizedString("common.error.general.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Folgen Sie dem Magic Link, der an %@ gesendet wurde.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verifyEmailDescription(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verify.email.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verify.email.description"
        }

        let format = NSLocalizedString("verify.email.description", tableName: "SoraCard", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// de translation: Fortsetzen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.continue", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.continue"
        }

        return NSLocalizedString("common.continue", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Füllen Sie das Formular mit Ihrem Namen und Ihrer Adresse aus
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedPersonalInfoDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.personal.info.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.personal.info.description"
        }

        return NSLocalizedString("get.prepared.personal.info.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Hole mehr XOR
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsGetMoreXor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("details.get.more.xor", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.get.more.xor"
        }

        return NSLocalizedString("details.get.more.xor", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Holen Sie sich die SORA Card
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func statusNotStarted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("status.not.started", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "status.not.started"
        }

        return NSLocalizedString("status.not.started", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Ich habe bereits eine Karte
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsAlreadyHaveCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("details.already.have.card", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.already.have.card"
        }

        return NSLocalizedString("details.already.have.card", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Ihr Antrag wurde abgelehnt.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationRejectedDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification.rejected.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.rejected.description"
        }

        return NSLocalizedString("verification.rejected.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Ihre E-Mail eingeben
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func enterEmailTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.email.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "enter.email.title"
        }

        return NSLocalizedString("enter.email.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Ihre Identitätsverifizierung ist erfolgreich und wir bereiten bereits den Versand der SORA Card vor!
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationSuccessfulDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification.successful.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.successful.description"
        }

        return NSLocalizedString("verification.successful.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Indem Sie fortfahren, bestätigen Sie, dass Sie diese Richtlinien gelesen, verstanden und akzeptiert haben
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func termsAndConditionsConfirmDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.and.conditions.confirm.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "terms.and.conditions.confirm.description"
        }

        return NSLocalizedString("terms.and.conditions.confirm.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Ja, ich verstehe
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func paymentWidgetUnavailableConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment.widget.unavailable.confirm", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "payment.widget.unavailable.confirm"
        }

        return NSLocalizedString("payment.widget.unavailable.confirm", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Jeder weitere Versuch wird Sie €%@ kosten.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationRejectedScreenAttemptsPriceDisclaimer(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verification.rejected.screen.attempts.price.disclaimer", tableName: "SoraCard", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.rejected.screen.attempts.price.disclaimer"
        }

        let format = NSLocalizedString("verification.rejected.screen.attempts.price.disclaimer", tableName: "SoraCard", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// de translation: Karte kostenlos ausstellen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsIssueCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("details.issue.card", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.issue.card"
        }

        return NSLocalizedString("details.issue.card", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Karteneinstellungen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func cardHubSettingsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card.hub.settings.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "card.hub.settings.title"
        }

        return NSLocalizedString("card.hub.settings.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Kaufen Sie XOR mit EUR
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getMoreXorDialogBuyOption(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.more.xor.dialog.buy.option", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.more.xor.dialog.buy.option"
        }

        return NSLocalizedString("get.more.xor.dialog.buy.option", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Kein Spam! Nur um Ihr Konto zu sichern
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonNoSpam(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.no.spam", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.no.spam"
        }

        return NSLocalizedString("common.no.spam", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Keine Freiversuche mehr
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func noFreeKycAttemptsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no.free.kyc.attempts.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "no.free.kyc.attempts.title"
        }

        return NSLocalizedString("no.free.kyc.attempts.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Keine Handynummer gefunden, bitte überprüfen Sie sie erneut und versuchen Sie es erneut.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonUserNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.user.not.found", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.user.not.found"
        }

        return NSLocalizedString("common.user.not.found", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Kostenlose Kartenausgabe
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsFreeCardIssuance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("details.free.card.issuance", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.free.card.issuance"
        }

        return NSLocalizedString("details.free.card.issuance", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Laden Sie die SORA Card mit Fiat- oder Kryptowährungen auf und zahlen Sie online, in Geschäften oder an Geldautomaten.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("details.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.title"
        }

        return NSLocalizedString("details.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Link erneut senden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonResendLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.resend.link", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.resend.link"
        }

        return NSLocalizedString("common.resend.link", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Link senden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonSendLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.send.link", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.send.link"
        }

        return NSLocalizedString("common.send.link", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Machen Sie ein Selfie
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedTakeSelfieTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.take.selfie.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.take.selfie.title"
        }

        return NSLocalizedString("get.prepared.take.selfie.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: OK, ich bin bereit
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedOkTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.ok.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.ok.title"
        }

        return NSLocalizedString("get.prepared.ok.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Reichen Sie ein Foto Ihres Ausweises ein
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedSubmitIdPhotoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.submit.id.photo.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.submit.id.photo.title"
        }

        return NSLocalizedString("get.prepared.submit.id.photo.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Reichen Sie ein Foto des Adressnachweises ein
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedProofAddressTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.proof.address.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.proof.address.title"
        }

        return NSLocalizedString("get.prepared.proof.address.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Reisepass, Führerschein, Personalausweis oder Aufenthaltsgenehmigung
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedSubmitIdPhotoDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.submit.id.photo.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.submit.id.photo.description"
        }

        return NSLocalizedString("get.prepared.submit.id.photo.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: SMS Code
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verifyPhoneNumberCodeInputFieldLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify.phone.number.code.input.field.label", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verify.phone.number.code.input.field.label"
        }

        return NSLocalizedString("verify.phone.number.code.input.field.label", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: SMS Code senden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonSendCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.send.code", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.send.code"
        }

        return NSLocalizedString("common.send.code", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: SMS-Code eingeben, der an %@ gesendet wurde
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verifyPhoneNumberDescription(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verify.phone.number.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verify.phone.number.description"
        }

        let format = NSLocalizedString("verify.phone.number.description", tableName: "SoraCard", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// de translation: SORA Card abmelden
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func cardHubSettingsLogout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card.hub.settings.logout", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "card.hub.settings.logout"
        }

        return NSLocalizedString("card.hub.settings.logout", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Schließen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.close", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.close"
        }

        return NSLocalizedString("common.close", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Senden Sie Ihre persönlichen Daten
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedPersonalInfoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.personal.info.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.personal.info.title"
        }

        return NSLocalizedString("get.prepared.personal.info.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Sie benötigen %@ mehr XOR (€%@)
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsNeedXorDesription(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("details.need.xor.desription", tableName: "SoraCard", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.need.xor.desription"
        }

        let format = NSLocalizedString("details.need.xor.desription", tableName: "SoraCard", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// de translation: Sie erhalten einen Verifizierungscode per SMS
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func enterPhoneNumberDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.phone.number.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "enter.phone.number.description"
        }

        return NSLocalizedString("enter.phone.number.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Sie haben %@ weitere freie Identitätsverifizierungs-Versuche.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationRejectedScreenAttemptsLeft(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verification.rejected.screen.attempts.left", tableName: "SoraCard", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.rejected.screen.attempts.left"
        }

        let format = NSLocalizedString("verification.rejected.screen.attempts.left", tableName: "SoraCard", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// de translation: Sie haben Ihre kostenlosen Identitätsverifizierungs-Versuche genutzt.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationRejectedScreenAttemptsUsed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification.rejected.screen.attempts.used", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.rejected.screen.attempts.used"
        }

        return NSLocalizedString("verification.rejected.screen.attempts.used", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Sie haben Ihren Identitätsverifizierungs-Antrag erfolgreich abgeschlossen. Die Prüfung ist noch nicht abgeschlossen und Sie können in Kürze mit einer Entscheidung rechnen.  In der Regel wird die Entscheidung noch am selben Tag getroffen, in manchen Fällen kann sie bis zu 3 Tage dauern.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func kycResultVerificationInProgressDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kyc.result.verification.in.progress.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "kyc.result.verification.in.progress.description"
        }

        return NSLocalizedString("kyc.result.verification.in.progress.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Sie haben Ihren kostenlosen Versuch bereits genutzt
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsAlreadyUsedFreeTry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("details.already.used.free.try", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.already.used.free.try"
        }

        return NSLocalizedString("details.already.used.free.try", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Sie haben Ihren kostenlosen Versuch genutzt, um den Identitätsverifizierungs-Prozess zu durchlaufen.   Wir bitten Sie, bis zur nächsten Aktualisierung der Anwendung zu warten, um mit kostenpflichtigen Versuchen fortzufahren.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func noFreeKycAttemptsDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no.free.kyc.attempts.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "no.free.kyc.attempts.description"
        }

        return NSLocalizedString("no.free.kyc.attempts.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Sie haben genug XOR
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsEnoughXorDesription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("details.enough.xor.desription", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.enough.xor.desription"
        }

        return NSLocalizedString("details.enough.xor.desription", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Sie können gegen XOR tauschen oder mit Euro kaufen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getMoreXorDialogDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.more.xor.dialog.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.more.xor.dialog.description"
        }

        return NSLocalizedString("get.more.xor.dialog.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Sie sind dabei, sich bei SORA Card abzumelden. Sie haben weiterhin Zugriff auf die eigenständige SORA Card App, aber Ihr Guthaben wird nicht mehr in der SORA Wallet verfügbar sein.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func cardHubSettingsLogoutDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card.hub.settings.logout.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "card.hub.settings.logout.description"
        }

        return NSLocalizedString("card.hub.settings.logout.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Siehe die Liste
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func unsupportedCountriesLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unsupported.countries.link", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "unsupported.countries.link"
        }

        return NSLocalizedString("unsupported.countries.link", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Stellen Sie sich vor
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func userRegistrationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user.registration.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "user.registration.title"
        }

        return NSLocalizedString("user.registration.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Support
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.support", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.support"
        }

        return NSLocalizedString("common.support", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Support
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationRejectedSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification.rejected.support", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.rejected.support"
        }

        return NSLocalizedString("verification.rejected.support", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Tausche Krypto gegen XOR
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getMoreXorDialogSwapOption(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.more.xor.dialog.swap.option", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.more.xor.dialog.swap.option"
        }

        return NSLocalizedString("get.more.xor.dialog.swap.option", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Telefonnummer
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func enterPhoneNumberPhoneInputFieldLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.phone.number.phone.input.field.label", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "enter.phone.number.phone.input.field.label"
        }

        return NSLocalizedString("enter.phone.number.phone.input.field.label", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Um die Identitätsverifizierung abzuschließen, müssen Sie Folgendes tun:
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func getPreparedNeed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get.prepared.need", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "get.prepared.need"
        }

        return NSLocalizedString("get.prepared.need", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Verifizieren Sie Ihre Telefonnummer
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verifyPhoneNumberTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify.phone.number.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verify.phone.number.title"
        }

        return NSLocalizedString("verify.phone.number.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Verifizierung abgelehnt
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationRejectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification.rejected.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.rejected.title"
        }

        return NSLocalizedString("verification.rejected.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Verifizierung fehlgeschlagen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationFailedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification.failed.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.failed.title"
        }

        return NSLocalizedString("verification.failed.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Versuchen Sie es erneut für €%@
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verificationRejectedScreenTryAgainForEuros(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verification.rejected.screen.try.again.for.euros", tableName: "SoraCard", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verification.rejected.screen.try.again.for.euros"
        }

        let format = NSLocalizedString("verification.rejected.screen.try.again.for.euros", tableName: "SoraCard", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// de translation: Verwenden Sie eine andere E-Mail
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonChangeEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.change.email", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.change.email"
        }

        return NSLocalizedString("common.change.email", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Vorname
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func userRegistrationFirstNameInputFiledLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user.registration.first.name.input.filed.label", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "user.registration.first.name.input.filed.label"
        }

        return NSLocalizedString("user.registration.first.name.input.filed.label", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Wenn Sie XOR im Wert von mindestens €%@ auf Ihrem SORA Card halten, staken oder Liquidität bereitstellen
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsFreeCardIssuanceConditionsXor(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("details.free.card.issuance.conditions.xor", tableName: "SoraCard", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.free.card.issuance.conditions.xor"
        }

        let format = NSLocalizedString("details.free.card.issuance.conditions.xor", tableName: "SoraCard", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// de translation: Widget nicht verfügbar
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func paymentWidgetUnavailableTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment.widget.unavailable.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "payment.widget.unavailable.title"
        }

        return NSLocalizedString("payment.widget.unavailable.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Wir möchten, dass Sie genau wissen, wie der SORA-Kartenservice funktionieren wird, wer Ihre Daten benötigt und warum. Wenn Sie diese Richtlinien lesen, können Sie die App unbesorgt nutzen.
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func termsAndConditionsDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.and.conditions.description", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "terms.and.conditions.description"
        }

        return NSLocalizedString("terms.and.conditions.description", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: oder %@ € Anmeldegebühr
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func detailsFreeCardIssuanceConditionsEuro(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("details.free.card.issuance.conditions.euro", tableName: "SoraCard", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "details.free.card.issuance.conditions.euro"
        }

        let format = NSLocalizedString("details.free.card.issuance.conditions.euro", tableName: "SoraCard", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// de translation: ok
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func commonOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.ok", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "common.ok"
        }

        return NSLocalizedString("common.ok", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Ändern Sie Ihre E-Mail
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func changeEmailTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change.email.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "change.email.title"
        }

        return NSLocalizedString("change.email.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Überprüfen Sie Ihre E-Mail
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func verifyEmailTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify.email.title", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "verify.email.title"
        }

        return NSLocalizedString("verify.email.title", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      /// de translation: Überprüfung läuft
      ///
      /// Locales: de, en, es, ru, fr, nl
      static func kycResultVerificationInProgress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kyc.result.verification.in.progress", tableName: "SoraCard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SoraCard", preferredLanguages: preferredLanguages) else {
          return "kyc.result.verification.in.progress"
        }

        return NSLocalizedString("kyc.result.verification.in.progress", tableName: "SoraCard", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _LaunchScreen: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
